<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible on Le Tour De Blog</title>
    <link>http://localhost:1313/tags/ansible/</link>
    <description>Recent content in Ansible on Le Tour De Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handling common tasks within Ansible</title>
      <link>http://localhost:1313/common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/common/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;When you begin constructing your Ansible tasks - roles - collections, you quickly realise that there are many tasks that you will use repeatedly with little variance. For example, if you&amp;rsquo;re using Ansible to help set-up and deploy your docker containers, you&amp;rsquo;ll have common tasks that create directories, configs, DNS and Traefik labels, among many others. If you&amp;rsquo;re like me, I would simply copy and paste these tasks. While Ansible will run through and automate these repeated tasks all the same, the more tasks you have to repeat in a play, the more bloated and unreadable your playbook becomes and the more maintenance upkeep is required.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Miscellaneous Ansible topics (rants)</title>
      <link>http://localhost:1313/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/misc/</guid>
      <description>&lt;h2 id=&#34;ansible-lives&#34;&gt;Ansible Lives!&lt;/h2&gt;&#xA;&lt;p&gt;A weird thing I&amp;rsquo;ve noticed with my Ansible journey are the number of people who either think that Ansible is dying/dead. It simply is not so. Some of these &amp;lsquo;doomsayers&amp;rsquo; don&amp;rsquo;t approach Ansible with a mindset of what can it do to help them achieve jobs and tasks, they approach it with whether learning it will give them the skill-set to fast-track their entry into a job, career, industry. These people will then jump onto Kubernetes and other solutions that are &amp;lsquo;all the rage&amp;rsquo; these days. But it&amp;rsquo;s important to remember:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structuring your Ansible Playbook</title>
      <link>http://localhost:1313/playbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/playbook/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;The automating of tasks with Ansible begins and ends with tasks defined in a playbook. There are various ways to structure your playbook, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Defining everything in a single playbook&lt;/li&gt;&#xA;&lt;li&gt;Defining tasks across multiple playbooks&lt;/li&gt;&#xA;&lt;li&gt;Using a single playbook to include roles that contain various organised tasks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For me, I prefer the latter option. I have a single &lt;code&gt;playbook.yml&lt;/code&gt;, and various roles containing tasks to automate the deployment of my docker services. However, there is no right way of doing things, and it&amp;rsquo;s simply a case of how many tasks you&amp;rsquo;re dealing with, what sort of tasks, and how you prefer to do things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structuring your Ansible Roles</title>
      <link>http://localhost:1313/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/roles/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Ansible roles contain the majority of my tasks that automate the setup and deployment of my Docker containers and Swarm services. During my time with Ansible, my roles have changed a lot, but the structure of&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;group_vars&#34;&gt;Group_Vars&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Contains variables that may be required across multiple roles. For example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Role 1 - Prepares and deploys Radarr&lt;/li&gt;&#xA;&lt;li&gt;Role 2 - Prepares and deploys Doplarr and Jellyseerr&lt;/li&gt;&#xA;&lt;li&gt;Role 3 - Prepares and deploys Radarr Prometheus exporter&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the above example, all three roles will require Radarr&amp;rsquo;s service name, port, location and api. Rather than defining these multiple times, it can be defined once in group_vars (minus sensitive values depending on your set-up).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome to my Blog</title>
      <link>http://localhost:1313/posts/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/main/</guid>
      <description>&lt;p&gt;This blog is dedicated to Ansible, and I will use this to discuss my set-up and provide some useful tips and information from my experiences using it to set-up and deploy Docker containers and Swarm services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;The Why?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Since I started using Ansible, I have grown to love it and am quite addicted to it, but it can be quite daunting for newcomers&lt;/li&gt;&#xA;&lt;li&gt;It is one thing to automate a task and another to do it efficiently and effectively&lt;/li&gt;&#xA;&lt;li&gt;It can be easy to fall into a rabbit hole of troubleshooting and frustration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So with that said, see the Ansible topics in the menus above. It will grow over time when I have time.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
